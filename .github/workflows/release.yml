name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result.id }}
      upload_url: ${{ steps.create-release.outputs.result.upload_url }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          result-encoding: json
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.get_version.outputs.VERSION }}',
              name: 'ディスク消去ユーティリティ ${{ steps.get_version.outputs.VERSION }}',
              body: 'リリースノートはこちらに記載されます。',
              draft: true,
              prerelease: false
            });
            return { id: data.id, upload_url: data.upload_url };

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf
          
      - name: Install app dependencies
        run: npm ci
        
      - name: Build manually
        run: |
          npm run build
          cd src-tauri
          cargo build --release
          
      - name: Package AppImage
        run: |
          mkdir -p dist
          cp src-tauri/target/release/rust_erase_gui dist/
          chmod +x dist/rust_erase_gui
          
      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/rust_erase_gui
          asset_name: rust_erase_gui
          asset_content_type: application/octet-stream
          
  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-linux]
    
    steps:
      - name: Publish release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            }); 